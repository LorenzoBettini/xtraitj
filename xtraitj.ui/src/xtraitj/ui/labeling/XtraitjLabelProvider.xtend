/*
* generated by Xtext
*/
package xtraitj.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.ui.labeling.XbaseImages
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider
import xtraitj.xtraitj.TJClass
import xtraitj.xtraitj.TJField
import xtraitj.xtraitj.TJMethod
import xtraitj.xtraitj.TJMethodDeclaration
import xtraitj.xtraitj.TJRequiredMethod
import xtraitj.xtraitj.TJTrait
import xtraitj.xtraitj.TJTraitReference

import static extension xtraitj.util.TraitJModelUtil.*
import org.eclipse.jface.viewers.StyledString
import xtraitj.xtraitj.TJConstructor

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class XtraitjLabelProvider extends XbaseLabelProvider {
	
	@Inject XbaseImages images

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(TJMethodDeclaration m) {
		new StyledString(
			m.name + m.parameterRepresentation
		).append(
			new StyledString(" : " + 
				m.type.simpleName,
				StyledString::DECORATIONS_STYLER
			)
		);
	}

	def text(TJConstructor cons) {
		cons.constructorRepresentation
	}

	def text(TJField f) {
		f.name + " : " + f.getType().getSimpleName()
	}
	
	def text(TJTraitReference r) {
		r.trait?.name
	}
	
	def image(TJTrait t) {
		"trait_obj.gif"
	}
	
	def image(TJClass c) {
		"class_obj.gif"
	}
	
	def image(TJField f) {
		images.forField(JvmVisibility::PRIVATE, false, false, false);
	}
	
	def image(TJMethod m) {
		images.forOperation(
			if (m.private)
				JvmVisibility::PRIVATE
			else
				JvmVisibility::PUBLIC
			, 
			false, false, false);
	}

	def image(TJConstructor c) {
		images.forConstructor(JvmVisibility::PUBLIC)
	}
	
	def image(TJRequiredMethod m) {
		images.forOperation(
			JvmVisibility::PUBLIC, 
			true, // abstract 
			false, false);
	}
	
	def image(TJTraitReference r) {
		if (!r.operations.empty)
			return "trait_altered.gif"
		return "trait_ref.gif"
	}
	
	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
