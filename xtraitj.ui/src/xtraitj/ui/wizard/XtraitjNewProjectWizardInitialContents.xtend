/*
 * generated by Xtext 2.10.0
 */
package xtraitj.ui.wizard


import com.google.inject.Inject
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.resource.FileExtensionProvider

class XtraitjNewProjectWizardInitialContents {
	@Inject
	FileExtensionProvider fileExtensionProvider

	def generateInitialContents(IFileSystemAccess2 fsa) {
		fsa.generateFile(
			"src/xtraitj/example." + fileExtensionProvider.primaryFileExtension,
			'''
			/*
			 * This is an example Xtraitj program
			 */
			
			package my.traits;
			
			import main.CInterface
			import java.util.List
			
			trait T {
				String s;
				// you can use full Java generics
				List<? extends String> strings;
			
				String m() {
					if (strings != null)
						return strings.toString 
					else
						return this.s;
				}
			}
			
			class C implements CInterface uses T {
				String s = "aString";
				List<? extends String> strings = null;
				
				// default constructor
				C() {}
				
				C(Iterable<String> iterable) {
					// map, toFirstUpper, toList are extension methods
					// [...] is a lambda expression
					strings = iterable.map[toFirstUpper].toList
				}
			}
			'''
			)
		fsa.generateFile(
			"src/main/Main.java",
			'''
			package main;
			
			import com.google.common.collect.Lists;
			
			import my.traits.C;
			
			public class Main {
				public static void main(String[] args) {
					CInterface c = new C();
					System.out.println(c.m());
					System.out.println(new C().m());
					System.out.println(
							new C(Lists.newArrayList
									("first", "second", "third"))
								.m());
				}
			}
			'''
			)
		fsa.generateFile(
			"src/main/CInterface.java",
			'''
			package main;
			
			public interface CInterface {
				String m();
			}
			'''
			)
	}
}
