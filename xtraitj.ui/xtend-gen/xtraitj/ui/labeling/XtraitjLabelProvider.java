/**
 * generated by Xtext
 */
package xtraitj.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.ui.labeling.XbaseImages;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;
import xtraitj.util.TraitJModelUtil;
import xtraitj.xtraitj.TJClass;
import xtraitj.xtraitj.TJConstructor;
import xtraitj.xtraitj.TJField;
import xtraitj.xtraitj.TJMethod;
import xtraitj.xtraitj.TJMethodDeclaration;
import xtraitj.xtraitj.TJRequiredMethod;
import xtraitj.xtraitj.TJTrait;
import xtraitj.xtraitj.TJTraitOperation;
import xtraitj.xtraitj.TJTraitReference;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class XtraitjLabelProvider extends XbaseLabelProvider {
  @Inject
  private XbaseImages images;
  
  @Inject
  public XtraitjLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public StyledString text(final TJMethodDeclaration m) {
    String _name = m.getName();
    String _parameterRepresentation = TraitJModelUtil.parameterRepresentation(m);
    String _plus = (_name + _parameterRepresentation);
    StyledString _styledString = new StyledString(_plus);
    JvmTypeReference _type = m.getType();
    String _simpleName = _type.getSimpleName();
    String _plus_1 = (" : " + _simpleName);
    StyledString _styledString_1 = new StyledString(_plus_1, 
      StyledString.DECORATIONS_STYLER);
    StyledString _append = _styledString.append(_styledString_1);
    return _append;
  }
  
  public String text(final TJConstructor cons) {
    String _constructorRepresentation = TraitJModelUtil.constructorRepresentation(cons);
    return _constructorRepresentation;
  }
  
  public String text(final TJField f) {
    String _name = f.getName();
    String _plus = (_name + " : ");
    JvmTypeReference _type = f.getType();
    String _simpleName = _type.getSimpleName();
    String _plus_1 = (_plus + _simpleName);
    return _plus_1;
  }
  
  public String text(final TJTraitReference r) {
    TJTrait _trait = r.getTrait();
    String _name = null;
    if (_trait!=null) {
      _name=_trait.getName();
    }
    return _name;
  }
  
  public String image(final TJTrait t) {
    return "trait_obj.gif";
  }
  
  public String image(final TJClass c) {
    return "class_obj.gif";
  }
  
  public Image image(final TJField f) {
    Image _forField = this.images.forField(JvmVisibility.PRIVATE, false, false, false);
    return _forField;
  }
  
  public Image image(final TJMethod m) {
    JvmVisibility _xifexpression = null;
    boolean _isPrivate = m.isPrivate();
    if (_isPrivate) {
      _xifexpression = JvmVisibility.PRIVATE;
    } else {
      _xifexpression = JvmVisibility.PUBLIC;
    }
    Image _forOperation = this.images.forOperation(_xifexpression, 
      false, false, false);
    return _forOperation;
  }
  
  public Image image(final TJConstructor c) {
    Image _forConstructor = this.images.forConstructor(JvmVisibility.PUBLIC);
    return _forConstructor;
  }
  
  public Image image(final TJRequiredMethod m) {
    Image _forOperation = this.images.forOperation(
      JvmVisibility.PUBLIC, 
      true, 
      false, false);
    return _forOperation;
  }
  
  public String image(final TJTraitReference r) {
    EList<TJTraitOperation> _operations = r.getOperations();
    boolean _isEmpty = _operations.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      return "trait_altered.gif";
    }
    return "trait_ref.gif";
  }
}
