/**
 * generated by Xtext
 */
package xtraitj.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Conversions;
import xtraitj.XtraitjStandaloneSetupGenerated;

@SuppressWarnings("all")
public class Main {
  public static void main(final String[] args) {
    boolean _isEmpty = ((List<String>)Conversions.doWrapArray(args)).isEmpty();
    if (_isEmpty) {
      System.err.println("Aborting: no path to EMF resource provided!");
      return;
    }
    XtraitjStandaloneSetupGenerated _xtraitjStandaloneSetupGenerated = new XtraitjStandaloneSetupGenerated();
    final Injector injector = _xtraitjStandaloneSetupGenerated.createInjectorAndDoEMFRegistration();
    final Main main = injector.<Main>getInstance(Main.class);
    String _get = args[0];
    main.runGenerator(_get);
  }
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  @Inject
  private IResourceValidator validator;
  
  @Inject
  private IGenerator generator;
  
  @Inject
  private JavaIoFileSystemAccess fileAccess;
  
  protected void runGenerator(final String string) {
    final ResourceSet set = this.resourceSetProvider.get();
    URI _createURI = URI.createURI(string);
    final Resource resource = set.getResource(_createURI, true);
    final List<Issue> issues = this.validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
    boolean _isEmpty = issues.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (final Issue issue : issues) {
        System.err.println(issue);
      }
      return;
    }
    this.fileAccess.setOutputPath("src-gen/");
    this.generator.doGenerate(resource, this.fileAccess);
    System.out.println("Code generation finished.");
  }
}
