/**
 * generated by Xtext
 */
package xtraitj.scoping;

import com.google.common.base.Function;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Extension;
import xtraitj.jvmmodel.TraitJJvmModelUtil;
import xtraitj.util.TraitJModelUtil;
import xtraitj.xtraitj.TJField;
import xtraitj.xtraitj.TJMember;
import xtraitj.xtraitj.TJTrait;
import xtraitj.xtraitj.TJTraitOperation;
import xtraitj.xtraitj.TJTraitReference;
import xtraitj.xtraitj.TjTraitOperationForProvided;
import xtraitj.xtraitj.XtraitjPackage;

/**
 * For the moment Xbase uses two different scope providers, one for
 * the runtime part and one for the content assist, thus we must
 * factor out commong behavior.
 * 
 * see http://www.eclipse.org/forums/index.php/mv/msg/476486/1041675/#msg_1041675
 */
@SuppressWarnings("all")
public class TraitJScopeProviderUtil {
  @Inject
  @Extension
  private TraitJJvmModelUtil _traitJJvmModelUtil;
  
  public IScope createCustomScope(final EObject context, final EReference reference) {
    boolean _or = false;
    EReference _tJTraitOperation_Member = XtraitjPackage.eINSTANCE.getTJTraitOperation_Member();
    boolean _equals = Objects.equal(reference, _tJTraitOperation_Member);
    if (_equals) {
      _or = true;
    } else {
      EReference _tJRedirectOperation_Member2 = XtraitjPackage.eINSTANCE.getTJRedirectOperation_Member2();
      boolean _equals_1 = Objects.equal(reference, _tJRedirectOperation_Member2);
      _or = (_equals || _equals_1);
    }
    if (_or) {
      return this.customScope(context);
    }
    return null;
  }
  
  protected IScope _customScope(final EObject op) {
    return IScope.NULLSCOPE;
  }
  
  protected IScope _customScope(final TJTraitOperation op) {
    TJTraitReference _containingTraitOperationExpression = TraitJModelUtil.containingTraitOperationExpression(op);
    TJTrait _trait = _containingTraitOperationExpression.getTrait();
    Iterable<JvmFeature> _jvmAllFeatures = this._traitJJvmModelUtil.jvmAllFeatures(_trait);
    final Function<JvmFeature,QualifiedName> _function = new Function<JvmFeature,QualifiedName>() {
      public QualifiedName apply(final JvmFeature it) {
        QualifiedName _xblockexpression = null;
        {
          final TJField field = TraitJScopeProviderUtil.this._traitJJvmModelUtil.sourceField(it);
          QualifiedName _xifexpression = null;
          boolean _notEquals = (!Objects.equal(field, null));
          if (_notEquals) {
            QualifiedName _xifexpression_1 = null;
            String _simpleName = it.getSimpleName();
            boolean _startsWith = _simpleName.startsWith("set");
            if (_startsWith) {
              _xifexpression_1 = null;
            } else {
              String _name = field.getName();
              QualifiedName _create = QualifiedName.create(_name);
              _xifexpression_1 = _create;
            }
            _xifexpression = _xifexpression_1;
          } else {
            String _simpleName_1 = it.getSimpleName();
            QualifiedName _create_1 = QualifiedName.create(_simpleName_1);
            _xifexpression = _create_1;
          }
          _xblockexpression = (_xifexpression);
        }
        return _xblockexpression;
      }
    };
    Iterable<IEObjectDescription> _scopedElementsFor = Scopes.<JvmFeature>scopedElementsFor(_jvmAllFeatures, _function);
    SimpleScope _simpleScope = new SimpleScope(_scopedElementsFor);
    return _simpleScope;
  }
  
  protected IScope _customScope(final TjTraitOperationForProvided op) {
    return this.scopeForDefinedMethods(op);
  }
  
  public SimpleScope scopeForDefinedMethods(final TJTraitOperation op) {
    TJTraitReference _containingTraitOperationExpression = TraitJModelUtil.containingTraitOperationExpression(op);
    TJTrait _trait = _containingTraitOperationExpression.getTrait();
    Iterable<JvmFeature> _jvmAllFeatures = this._traitJJvmModelUtil.jvmAllFeatures(_trait);
    final Function<JvmFeature,QualifiedName> _function = new Function<JvmFeature,QualifiedName>() {
      public QualifiedName apply(final JvmFeature it) {
        QualifiedName _xifexpression = null;
        boolean _and = false;
        TJField _sourceField = TraitJScopeProviderUtil.this._traitJJvmModelUtil.sourceField(it);
        boolean _equals = Objects.equal(_sourceField, null);
        if (!_equals) {
          _and = false;
        } else {
          TJMember _originalSource = TraitJScopeProviderUtil.this._traitJJvmModelUtil.originalSource(it);
          boolean _notEquals = (!Objects.equal(_originalSource, null));
          _and = (_equals && _notEquals);
        }
        if (_and) {
          String _simpleName = it.getSimpleName();
          QualifiedName _create = QualifiedName.create(_simpleName);
          _xifexpression = _create;
        } else {
          _xifexpression = null;
        }
        return _xifexpression;
      }
    };
    Iterable<IEObjectDescription> _scopedElementsFor = Scopes.<JvmFeature>scopedElementsFor(_jvmAllFeatures, _function);
    SimpleScope _simpleScope = new SimpleScope(_scopedElementsFor);
    return _simpleScope;
  }
  
  public IScope customScope(final EObject op) {
    if (op instanceof TjTraitOperationForProvided) {
      return _customScope((TjTraitOperationForProvided)op);
    } else if (op instanceof TJTraitOperation) {
      return _customScope((TJTraitOperation)op);
    } else if (op != null) {
      return _customScope(op);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(op).toString());
    }
  }
}
