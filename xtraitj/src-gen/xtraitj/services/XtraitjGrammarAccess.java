/*
* generated by Xtext
*/
package xtraitj.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XtraitjGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TJProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsTJDeclarationParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//TJProgram:
		//	("package" name=QualifiedName ";")? importSection=XImportSection? elements+=TJDeclaration*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? importSection=XImportSection? elements+=TJDeclaration*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }

		//elements+=TJDeclaration*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//TJDeclaration
		public RuleCall getElementsTJDeclarationParserRuleCall_2_0() { return cElementsTJDeclarationParserRuleCall_2_0; }
	}

	public class TJDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTJTraitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTJClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TJDeclaration:
		//	TJTrait | TJClass;
		public ParserRule getRule() { return rule; }

		//TJTrait | TJClass
		public Alternatives getAlternatives() { return cAlternatives; }

		//TJTrait
		public RuleCall getTJTraitParserRuleCall_0() { return cTJTraitParserRuleCall_0; }

		//TJClass
		public RuleCall getTJClassParserRuleCall_1() { return cTJClassParserRuleCall_1; }
	}

	public class TJTraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJTrait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTraitExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTraitExpressionTJTraitExpressionParserRuleCall_2_1_0 = (RuleCall)cTraitExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersTJMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TJTrait:
		//	"trait" name=ID ("uses" traitExpression=TJTraitExpression)? "{" members+=TJMember* "}";
		public ParserRule getRule() { return rule; }

		//"trait" name=ID ("uses" traitExpression=TJTraitExpression)? "{" members+=TJMember* "}"
		public Group getGroup() { return cGroup; }

		//"trait"
		public Keyword getTraitKeyword_0() { return cTraitKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("uses" traitExpression=TJTraitExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"uses"
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }

		//traitExpression=TJTraitExpression
		public Assignment getTraitExpressionAssignment_2_1() { return cTraitExpressionAssignment_2_1; }

		//TJTraitExpression
		public RuleCall getTraitExpressionTJTraitExpressionParserRuleCall_2_1_0() { return cTraitExpressionTJTraitExpressionParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=TJMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//TJMember
		public RuleCall getMembersTJMemberParserRuleCall_4_0() { return cMembersTJMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TJClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImplementsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cInterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0 = (RuleCall)cInterfacesAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUsesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTraitExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTraitExpressionTJTraitExpressionParserRuleCall_3_1_0 = (RuleCall)cTraitExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsTJFieldParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TJClass:
		//	"class" name=ID ("implements" interfaces+=JvmParameterizedTypeReference (","
		//	interfaces+=JvmParameterizedTypeReference)*)? ("uses" traitExpression=TJTraitExpression)? "{" fields+=TJField* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("implements" interfaces+=JvmParameterizedTypeReference (","
		//interfaces+=JvmParameterizedTypeReference)*)? ("uses" traitExpression=TJTraitExpression)? "{" fields+=TJField* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("implements" interfaces+=JvmParameterizedTypeReference ("," interfaces+=JvmParameterizedTypeReference)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"implements"
		public Keyword getImplementsKeyword_2_0() { return cImplementsKeyword_2_0; }

		//interfaces+=JvmParameterizedTypeReference
		public Assignment getInterfacesAssignment_2_1() { return cInterfacesAssignment_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }

		//("," interfaces+=JvmParameterizedTypeReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//interfaces+=JvmParameterizedTypeReference
		public Assignment getInterfacesAssignment_2_2_1() { return cInterfacesAssignment_2_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0() { return cInterfacesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0; }

		//("uses" traitExpression=TJTraitExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"uses"
		public Keyword getUsesKeyword_3_0() { return cUsesKeyword_3_0; }

		//traitExpression=TJTraitExpression
		public Assignment getTraitExpressionAssignment_3_1() { return cTraitExpressionAssignment_3_1; }

		//TJTraitExpression
		public RuleCall getTraitExpressionTJTraitExpressionParserRuleCall_3_1_0() { return cTraitExpressionTJTraitExpressionParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//fields+=TJField*
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }

		//TJField
		public RuleCall getFieldsTJFieldParserRuleCall_5_0() { return cFieldsTJFieldParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TJTraitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJTraitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferencesTJTraitReferenceParserRuleCall_0_0 = (RuleCall)cReferencesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReferencesTJTraitReferenceParserRuleCall_1_1_0 = (RuleCall)cReferencesAssignment_1_1.eContents().get(0);
		
		//TJTraitExpression:
		//	references+=TJTraitReference ("," references+=TJTraitReference)*;
		public ParserRule getRule() { return rule; }

		//references+=TJTraitReference ("," references+=TJTraitReference)*
		public Group getGroup() { return cGroup; }

		//references+=TJTraitReference
		public Assignment getReferencesAssignment_0() { return cReferencesAssignment_0; }

		//TJTraitReference
		public RuleCall getReferencesTJTraitReferenceParserRuleCall_0_0() { return cReferencesTJTraitReferenceParserRuleCall_0_0; }

		//("," references+=TJTraitReference)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//references+=TJTraitReference
		public Assignment getReferencesAssignment_1_1() { return cReferencesAssignment_1_1; }

		//TJTraitReference
		public RuleCall getReferencesTJTraitReferenceParserRuleCall_1_1_0() { return cReferencesTJTraitReferenceParserRuleCall_1_1_0; }
	}

	public class TJTraitReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJTraitReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraitTJTraitCrossReference_0_0 = (CrossReference)cTraitAssignment_0.eContents().get(0);
		private final RuleCall cTraitTJTraitQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTraitTJTraitCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationsTJTraitOperationParserRuleCall_1_1_0 = (RuleCall)cOperationsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOperationsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperationsTJTraitOperationParserRuleCall_1_2_1_0 = (RuleCall)cOperationsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TJTraitReference:
		//	trait=[TJTrait|QualifiedName] ("[" operations+=TJTraitOperation ("," operations+=TJTraitOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//trait=[TJTrait|QualifiedName] ("[" operations+=TJTraitOperation ("," operations+=TJTraitOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//trait=[TJTrait|QualifiedName]
		public Assignment getTraitAssignment_0() { return cTraitAssignment_0; }

		//[TJTrait|QualifiedName]
		public CrossReference getTraitTJTraitCrossReference_0_0() { return cTraitTJTraitCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTraitTJTraitQualifiedNameParserRuleCall_0_0_1() { return cTraitTJTraitQualifiedNameParserRuleCall_0_0_1; }

		//("[" operations+=TJTraitOperation ("," operations+=TJTraitOperation)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//operations+=TJTraitOperation
		public Assignment getOperationsAssignment_1_1() { return cOperationsAssignment_1_1; }

		//TJTraitOperation
		public RuleCall getOperationsTJTraitOperationParserRuleCall_1_1_0() { return cOperationsTJTraitOperationParserRuleCall_1_1_0; }

		//("," operations+=TJTraitOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//operations+=TJTraitOperation
		public Assignment getOperationsAssignment_1_2_1() { return cOperationsAssignment_1_2_1; }

		//TJTraitOperation
		public RuleCall getOperationsTJTraitOperationParserRuleCall_1_2_1_0() { return cOperationsTJTraitOperationParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class TJTraitOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJTraitOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTjTraitOperationForProvidedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTJRenameOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTJRedirectOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TJTraitOperation:
		//	TjTraitOperationForProvided | TJRenameOperation | TJRedirectOperation;
		public ParserRule getRule() { return rule; }

		//TjTraitOperationForProvided | TJRenameOperation | TJRedirectOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//TjTraitOperationForProvided
		public RuleCall getTjTraitOperationForProvidedParserRuleCall_0() { return cTjTraitOperationForProvidedParserRuleCall_0; }

		//TJRenameOperation
		public RuleCall getTJRenameOperationParserRuleCall_1() { return cTJRenameOperationParserRuleCall_1; }

		//TJRedirectOperation
		public RuleCall getTJRedirectOperationParserRuleCall_2() { return cTJRedirectOperationParserRuleCall_2; }
	}

	public class TjTraitOperationForProvidedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TjTraitOperationForProvided");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTJHideOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTJRestrictOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTJAliasOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TjTraitOperationForProvided:
		//	TJHideOperation | TJRestrictOperation | TJAliasOperation;
		public ParserRule getRule() { return rule; }

		//TJHideOperation | TJRestrictOperation | TJAliasOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//TJHideOperation
		public RuleCall getTJHideOperationParserRuleCall_0() { return cTJHideOperationParserRuleCall_0; }

		//TJRestrictOperation
		public RuleCall getTJRestrictOperationParserRuleCall_1() { return cTJRestrictOperationParserRuleCall_1; }

		//TJAliasOperation
		public RuleCall getTJAliasOperationParserRuleCall_2() { return cTJAliasOperationParserRuleCall_2; }
	}

	public class TJHideOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJHideOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTJHideOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberJvmMemberCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberJvmMemberCrossReference_2_0.eContents().get(1);
		
		//TJHideOperation:
		//	{TJHideOperation} "hide" member=[types::JvmMember];
		public ParserRule getRule() { return rule; }

		//{TJHideOperation} "hide" member=[types::JvmMember]
		public Group getGroup() { return cGroup; }

		//{TJHideOperation}
		public Action getTJHideOperationAction_0() { return cTJHideOperationAction_0; }

		//"hide"
		public Keyword getHideKeyword_1() { return cHideKeyword_1; }

		//member=[types::JvmMember]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//[types::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_2_0() { return cMemberJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_2_0_1() { return cMemberJvmMemberIDTerminalRuleCall_2_0_1; }
	}

	public class TJRestrictOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJRestrictOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTJRestrictOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestrictKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberJvmMemberCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberJvmMemberCrossReference_2_0.eContents().get(1);
		
		//TJRestrictOperation:
		//	{TJRestrictOperation} "restrict" member=[types::JvmMember];
		public ParserRule getRule() { return rule; }

		//{TJRestrictOperation} "restrict" member=[types::JvmMember]
		public Group getGroup() { return cGroup; }

		//{TJRestrictOperation}
		public Action getTJRestrictOperationAction_0() { return cTJRestrictOperationAction_0; }

		//"restrict"
		public Keyword getRestrictKeyword_1() { return cRestrictKeyword_1; }

		//member=[types::JvmMember]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//[types::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_2_0() { return cMemberJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_2_0_1() { return cMemberJvmMemberIDTerminalRuleCall_2_0_1; }
	}

	public class TJAliasOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJAliasOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTJAliasOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAliasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberJvmMemberCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewnameIDTerminalRuleCall_4_0 = (RuleCall)cNewnameAssignment_4.eContents().get(0);
		
		//TJAliasOperation:
		//	{TJAliasOperation} "alias" member=[types::JvmMember] "as" newname=ID;
		public ParserRule getRule() { return rule; }

		//{TJAliasOperation} "alias" member=[types::JvmMember] "as" newname=ID
		public Group getGroup() { return cGroup; }

		//{TJAliasOperation}
		public Action getTJAliasOperationAction_0() { return cTJAliasOperationAction_0; }

		//"alias"
		public Keyword getAliasKeyword_1() { return cAliasKeyword_1; }

		//member=[types::JvmMember]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//[types::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_2_0() { return cMemberJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_2_0_1() { return cMemberJvmMemberIDTerminalRuleCall_2_0_1; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//newname=ID
		public Assignment getNewnameAssignment_4() { return cNewnameAssignment_4; }

		//ID
		public RuleCall getNewnameIDTerminalRuleCall_4_0() { return cNewnameIDTerminalRuleCall_4_0; }
	}

	public class TJRenameOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJRenameOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTJRenameOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRenameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberJvmMemberCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewnameIDTerminalRuleCall_4_0 = (RuleCall)cNewnameAssignment_4.eContents().get(0);
		
		//TJRenameOperation:
		//	{TJRenameOperation} "rename" member=[types::JvmMember] "to" newname=ID;
		public ParserRule getRule() { return rule; }

		//{TJRenameOperation} "rename" member=[types::JvmMember] "to" newname=ID
		public Group getGroup() { return cGroup; }

		//{TJRenameOperation}
		public Action getTJRenameOperationAction_0() { return cTJRenameOperationAction_0; }

		//"rename"
		public Keyword getRenameKeyword_1() { return cRenameKeyword_1; }

		//member=[types::JvmMember]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//[types::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_2_0() { return cMemberJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_2_0_1() { return cMemberJvmMemberIDTerminalRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//newname=ID
		public Assignment getNewnameAssignment_4() { return cNewnameAssignment_4; }

		//ID
		public RuleCall getNewnameIDTerminalRuleCall_4_0() { return cNewnameIDTerminalRuleCall_4_0; }
	}

	public class TJRedirectOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJRedirectOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTJRedirectOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRedirectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberJvmMemberCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberJvmMemberIDTerminalRuleCall_2_0_1 = (RuleCall)cMemberJvmMemberCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMember2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMember2JvmMemberCrossReference_4_0 = (CrossReference)cMember2Assignment_4.eContents().get(0);
		private final RuleCall cMember2JvmMemberIDTerminalRuleCall_4_0_1 = (RuleCall)cMember2JvmMemberCrossReference_4_0.eContents().get(1);
		
		//TJRedirectOperation:
		//	{TJRedirectOperation} "redirect" member=[types::JvmMember] "to" member2=[types::JvmMember];
		public ParserRule getRule() { return rule; }

		//{TJRedirectOperation} "redirect" member=[types::JvmMember] "to" member2=[types::JvmMember]
		public Group getGroup() { return cGroup; }

		//{TJRedirectOperation}
		public Action getTJRedirectOperationAction_0() { return cTJRedirectOperationAction_0; }

		//"redirect"
		public Keyword getRedirectKeyword_1() { return cRedirectKeyword_1; }

		//member=[types::JvmMember]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//[types::JvmMember]
		public CrossReference getMemberJvmMemberCrossReference_2_0() { return cMemberJvmMemberCrossReference_2_0; }

		//ID
		public RuleCall getMemberJvmMemberIDTerminalRuleCall_2_0_1() { return cMemberJvmMemberIDTerminalRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//member2=[types::JvmMember]
		public Assignment getMember2Assignment_4() { return cMember2Assignment_4; }

		//[types::JvmMember]
		public CrossReference getMember2JvmMemberCrossReference_4_0() { return cMember2JvmMemberCrossReference_4_0; }

		//ID
		public RuleCall getMember2JvmMemberIDTerminalRuleCall_4_0_1() { return cMember2JvmMemberIDTerminalRuleCall_4_0_1; }
	}

	public class TJMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTJFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTJMethodDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TJMember:
		//	TJField | TJMethodDeclaration;
		public ParserRule getRule() { return rule; }

		//=> TJField | TJMethodDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> TJField
		public RuleCall getTJFieldParserRuleCall_0() { return cTJFieldParserRuleCall_0; }

		//TJMethodDeclaration
		public RuleCall getTJMethodDeclarationParserRuleCall_1() { return cTJMethodDeclarationParserRuleCall_1; }
	}

	public class TJFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitXExpressionParserRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TJField:
		//	type=JvmTypeReference name=ValidID ("=" init=XExpression)? ";";
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ValidID ("=" init=XExpression)? ";"
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("=" init=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//init=XExpression
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }

		//XExpression
		public RuleCall getInitXExpressionParserRuleCall_2_1_0() { return cInitXExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TJMethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJMethodDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTJRequiredMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTJMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TJMethodDeclaration:
		//	TJRequiredMethod | TJMethod;
		public ParserRule getRule() { return rule; }

		//=> TJRequiredMethod | TJMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> TJRequiredMethod
		public RuleCall getTJRequiredMethodParserRuleCall_0() { return cTJRequiredMethodParserRuleCall_0; }

		//TJMethod
		public RuleCall getTJMethodParserRuleCall_1() { return cTJMethodParserRuleCall_1; }
	}

	public class TJRequiredMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJRequiredMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TJRequiredMethod:
		//	type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")"
		//	";";
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TJMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TJMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrivateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrivatePrivateKeyword_0_0 = (Keyword)cPrivateAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//TJMethod:
		//	private?="private"? type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter (","
		//	params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//private?="private"? type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter (","
		//params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//private?="private"?
		public Assignment getPrivateAssignment_0() { return cPrivateAssignment_0; }

		//"private"
		public Keyword getPrivatePrivateKeyword_0_0() { return cPrivatePrivateKeyword_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	
	
	private TJProgramElements pTJProgram;
	private TJDeclarationElements pTJDeclaration;
	private TJTraitElements pTJTrait;
	private TJClassElements pTJClass;
	private TJTraitExpressionElements pTJTraitExpression;
	private TJTraitReferenceElements pTJTraitReference;
	private TJTraitOperationElements pTJTraitOperation;
	private TjTraitOperationForProvidedElements pTjTraitOperationForProvided;
	private TJHideOperationElements pTJHideOperation;
	private TJRestrictOperationElements pTJRestrictOperation;
	private TJAliasOperationElements pTJAliasOperation;
	private TJRenameOperationElements pTJRenameOperation;
	private TJRedirectOperationElements pTJRedirectOperation;
	private TJMemberElements pTJMember;
	private TJFieldElements pTJField;
	private TJMethodDeclarationElements pTJMethodDeclaration;
	private TJRequiredMethodElements pTJRequiredMethod;
	private TJMethodElements pTJMethod;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XtraitjGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtraitj.Xtraitj".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//TJProgram:
	//	("package" name=QualifiedName ";")? importSection=XImportSection? elements+=TJDeclaration*;
	public TJProgramElements getTJProgramAccess() {
		return (pTJProgram != null) ? pTJProgram : (pTJProgram = new TJProgramElements());
	}
	
	public ParserRule getTJProgramRule() {
		return getTJProgramAccess().getRule();
	}

	//TJDeclaration:
	//	TJTrait | TJClass;
	public TJDeclarationElements getTJDeclarationAccess() {
		return (pTJDeclaration != null) ? pTJDeclaration : (pTJDeclaration = new TJDeclarationElements());
	}
	
	public ParserRule getTJDeclarationRule() {
		return getTJDeclarationAccess().getRule();
	}

	//TJTrait:
	//	"trait" name=ID ("uses" traitExpression=TJTraitExpression)? "{" members+=TJMember* "}";
	public TJTraitElements getTJTraitAccess() {
		return (pTJTrait != null) ? pTJTrait : (pTJTrait = new TJTraitElements());
	}
	
	public ParserRule getTJTraitRule() {
		return getTJTraitAccess().getRule();
	}

	//TJClass:
	//	"class" name=ID ("implements" interfaces+=JvmParameterizedTypeReference (","
	//	interfaces+=JvmParameterizedTypeReference)*)? ("uses" traitExpression=TJTraitExpression)? "{" fields+=TJField* "}";
	public TJClassElements getTJClassAccess() {
		return (pTJClass != null) ? pTJClass : (pTJClass = new TJClassElements());
	}
	
	public ParserRule getTJClassRule() {
		return getTJClassAccess().getRule();
	}

	//TJTraitExpression:
	//	references+=TJTraitReference ("," references+=TJTraitReference)*;
	public TJTraitExpressionElements getTJTraitExpressionAccess() {
		return (pTJTraitExpression != null) ? pTJTraitExpression : (pTJTraitExpression = new TJTraitExpressionElements());
	}
	
	public ParserRule getTJTraitExpressionRule() {
		return getTJTraitExpressionAccess().getRule();
	}

	//TJTraitReference:
	//	trait=[TJTrait|QualifiedName] ("[" operations+=TJTraitOperation ("," operations+=TJTraitOperation)* "]")?;
	public TJTraitReferenceElements getTJTraitReferenceAccess() {
		return (pTJTraitReference != null) ? pTJTraitReference : (pTJTraitReference = new TJTraitReferenceElements());
	}
	
	public ParserRule getTJTraitReferenceRule() {
		return getTJTraitReferenceAccess().getRule();
	}

	//TJTraitOperation:
	//	TjTraitOperationForProvided | TJRenameOperation | TJRedirectOperation;
	public TJTraitOperationElements getTJTraitOperationAccess() {
		return (pTJTraitOperation != null) ? pTJTraitOperation : (pTJTraitOperation = new TJTraitOperationElements());
	}
	
	public ParserRule getTJTraitOperationRule() {
		return getTJTraitOperationAccess().getRule();
	}

	//TjTraitOperationForProvided:
	//	TJHideOperation | TJRestrictOperation | TJAliasOperation;
	public TjTraitOperationForProvidedElements getTjTraitOperationForProvidedAccess() {
		return (pTjTraitOperationForProvided != null) ? pTjTraitOperationForProvided : (pTjTraitOperationForProvided = new TjTraitOperationForProvidedElements());
	}
	
	public ParserRule getTjTraitOperationForProvidedRule() {
		return getTjTraitOperationForProvidedAccess().getRule();
	}

	//TJHideOperation:
	//	{TJHideOperation} "hide" member=[types::JvmMember];
	public TJHideOperationElements getTJHideOperationAccess() {
		return (pTJHideOperation != null) ? pTJHideOperation : (pTJHideOperation = new TJHideOperationElements());
	}
	
	public ParserRule getTJHideOperationRule() {
		return getTJHideOperationAccess().getRule();
	}

	//TJRestrictOperation:
	//	{TJRestrictOperation} "restrict" member=[types::JvmMember];
	public TJRestrictOperationElements getTJRestrictOperationAccess() {
		return (pTJRestrictOperation != null) ? pTJRestrictOperation : (pTJRestrictOperation = new TJRestrictOperationElements());
	}
	
	public ParserRule getTJRestrictOperationRule() {
		return getTJRestrictOperationAccess().getRule();
	}

	//TJAliasOperation:
	//	{TJAliasOperation} "alias" member=[types::JvmMember] "as" newname=ID;
	public TJAliasOperationElements getTJAliasOperationAccess() {
		return (pTJAliasOperation != null) ? pTJAliasOperation : (pTJAliasOperation = new TJAliasOperationElements());
	}
	
	public ParserRule getTJAliasOperationRule() {
		return getTJAliasOperationAccess().getRule();
	}

	//TJRenameOperation:
	//	{TJRenameOperation} "rename" member=[types::JvmMember] "to" newname=ID;
	public TJRenameOperationElements getTJRenameOperationAccess() {
		return (pTJRenameOperation != null) ? pTJRenameOperation : (pTJRenameOperation = new TJRenameOperationElements());
	}
	
	public ParserRule getTJRenameOperationRule() {
		return getTJRenameOperationAccess().getRule();
	}

	//TJRedirectOperation:
	//	{TJRedirectOperation} "redirect" member=[types::JvmMember] "to" member2=[types::JvmMember];
	public TJRedirectOperationElements getTJRedirectOperationAccess() {
		return (pTJRedirectOperation != null) ? pTJRedirectOperation : (pTJRedirectOperation = new TJRedirectOperationElements());
	}
	
	public ParserRule getTJRedirectOperationRule() {
		return getTJRedirectOperationAccess().getRule();
	}

	//TJMember:
	//	TJField | TJMethodDeclaration;
	public TJMemberElements getTJMemberAccess() {
		return (pTJMember != null) ? pTJMember : (pTJMember = new TJMemberElements());
	}
	
	public ParserRule getTJMemberRule() {
		return getTJMemberAccess().getRule();
	}

	//TJField:
	//	type=JvmTypeReference name=ValidID ("=" init=XExpression)? ";";
	public TJFieldElements getTJFieldAccess() {
		return (pTJField != null) ? pTJField : (pTJField = new TJFieldElements());
	}
	
	public ParserRule getTJFieldRule() {
		return getTJFieldAccess().getRule();
	}

	//TJMethodDeclaration:
	//	TJRequiredMethod | TJMethod;
	public TJMethodDeclarationElements getTJMethodDeclarationAccess() {
		return (pTJMethodDeclaration != null) ? pTJMethodDeclaration : (pTJMethodDeclaration = new TJMethodDeclarationElements());
	}
	
	public ParserRule getTJMethodDeclarationRule() {
		return getTJMethodDeclarationAccess().getRule();
	}

	//TJRequiredMethod:
	//	type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")"
	//	";";
	public TJRequiredMethodElements getTJRequiredMethodAccess() {
		return (pTJRequiredMethod != null) ? pTJRequiredMethod : (pTJRequiredMethod = new TJRequiredMethodElements());
	}
	
	public ParserRule getTJRequiredMethodRule() {
		return getTJRequiredMethodAccess().getRule();
	}

	//TJMethod:
	//	private?="private"? type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter (","
	//	params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
	public TJMethodElements getTJMethodAccess() {
		return (pTJMethod != null) ? pTJMethod : (pTJMethod = new TJMethodElements());
	}
	
	public ParserRule getTJMethodRule() {
		return getTJMethodAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * /
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression (=>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
