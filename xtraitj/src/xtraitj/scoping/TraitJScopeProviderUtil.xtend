/*
 * generated by Xtext
 */
package xtraitj.scoping

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope
import xtraitj.jvmmodel.TraitJJvmModelUtil
import xtraitj.xtraitj.TJTraitOperation
import xtraitj.xtraitj.TjTraitOperationForProvided
import xtraitj.xtraitj.XtraitjPackage

import static extension org.eclipse.xtext.scoping.Scopes.*
import static extension xtraitj.util.TraitJModelUtil.*

/**
 * For the moment Xbase uses two different scope providers, one for
 * the runtime part and one for the content assist, thus we must
 * factor out commong behavior.
 * 
 * see http://www.eclipse.org/forums/index.php/mv/msg/476486/1041675/#msg_1041675
 *
 */
class TraitJScopeProviderUtil {
	@Inject extension TraitJJvmModelUtil

	def IScope createCustomScope(EObject context, EReference reference) {
		if (reference == XtraitjPackage::eINSTANCE.TJTraitOperation_Member ||
			reference == XtraitjPackage::eINSTANCE.TJRedirectOperation_Member2
		) {
			return context.customScope
		}

		return null;
	}

	def dispatch customScope(EObject op) {
		IScope::NULLSCOPE
	}

	def dispatch customScope(TJTraitOperation op) {
		// a JvmMember does not have 'name', but 'simpleName'
		// thus we must also provide a function for computing the
		// QualifiedName (the default one relies on 'name')
		return new SimpleScope(
			op.containingTraitOperationExpression.trait.jvmAllFeatures.scopedElementsFor [
				val field = sourceField
				// avoid to put the same field name twice:
				// each field has both a getter and a setter associated
				if (field != null)
					// so we do not put it when we find the setter
					if (simpleName.startsWith("set"))
						null
					else
						QualifiedName::create(field.name)
				else
					QualifiedName::create(simpleName)
			]
		)
	}

	def dispatch customScope(TjTraitOperationForProvided op) {
		return scopeForDefinedMethods(op)
	}

	def scopeForDefinedMethods(TJTraitOperation op) {
		new SimpleScope(
			op.containingTraitOperationExpression.trait.jvmAllFeatures.
				scopedElementsFor [
					if (sourceField == null && originalSource != null)
						QualifiedName::create(simpleName)
					else
						null
				]
		)
	}
}
