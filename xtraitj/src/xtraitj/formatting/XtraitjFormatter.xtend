/*
 * generated by Xtext
 */
package xtraitj.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import xtraitj.services.XtraitjGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class XtraitjFormatter extends AbstractDeclarativeFormatter {

	@Inject extension XtraitjGrammarAccess f
	
	override protected void configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(120);
		
		c.setLinewrap(1, 2, 3).around(f.TJDeclarationRule);
		//c.setLinewrap(1, 2, 3).around(f.getPackageDeclarationRule());
		c.setLinewrap(1, 1, 2).around(f.TJFieldRule);
		c.setLinewrap(1, 1, 2).around(f.TJMemberRule);
		
		val pairs = f.findKeywordPairs("{", "}");
		for (pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}

		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
	}
}
