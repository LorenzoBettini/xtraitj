package xtraitj.tests;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper;
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper.Result;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import xtraitj.XtraitjInjectorProvider;
import xtraitj.input.tests.TraitJInputs;
import xtraitj.xtraitj.TJProgram;

@RunWith(XtextRunner.class)
@InjectWith(XtraitjInjectorProvider.class)
@SuppressWarnings("all")
public class TraitJCompilerTest {
  @Inject
  @Extension
  private ParseHelper<TJProgram> _parseHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Inject
  @Extension
  private TraitJInputs _traitJInputs;
  
  @Inject
  @Extension
  private ReflectExtensions _reflectExtensions;
  
  @Test
  public void testTraitMethods() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("trait T {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<Integer> f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean b;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean abM(String s);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void abV();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Object m(List<String> l, String s) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("f = newArrayList(1)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return l.size + s + f + abM(\"foo\") + b;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import java.util.List;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract List<Integer> getF();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setF(final List<Integer> f);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract boolean isB();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setB(final boolean b);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object m(final List<String> l, final String s);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract boolean abM(final String s);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void abV();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "T", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import java.util.ArrayList;");
          _builder_1.newLine();
          _builder_1.append("import java.util.List;");
          _builder_1.newLine();
          _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
          _builder_1.newLine();
          _builder_1.append("import traits.T;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class TImpl implements T {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public TImpl(final T delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public List<Integer> getF() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.getF();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public void setF(final List<Integer> f) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_delegate.setF(f);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public boolean isB() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.isB();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public void setB(final boolean b) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_delegate.setB(b);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public boolean abM(final String s) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.abM(s);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public void abV() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_delegate.abV();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public Object m(final List<String> l, final String s) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m(l, s);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public Object _m(final List<String> l, final String s) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("ArrayList<Integer> _newArrayList = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(1));");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this.setF(_newArrayList);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _size = l.size();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("String _plus = (Integer.valueOf(_size) + s);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("List<Integer> _f = this.getF();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("String _plus_1 = (_plus + _f);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("boolean _abM = this.abM(\"foo\");");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("String _plus_2 = (_plus_1 + Boolean.valueOf(_abM));");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("boolean _isB = this.isB();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return (_plus_2 + Boolean.valueOf(_isB));");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "T", _builder_1);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_builder, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitAndClass() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("trait T {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<Integer> f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean b;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Object m(List<String> l, String s) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("f = newArrayList(1)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return l.size + s + f + b;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Object n() { m(newLinkedList(\"bar\"), \"foo\"); }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class C uses T {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("List<Integer> f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean b=false;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("import java.util.List;");
          _builder.newLine();
          _builder.append("import traits.T;");
          _builder.newLine();
          _builder.append("import traits.impl.TImpl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C implements T {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private List<Integer> f;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public List<Integer> getF() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.f;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setF(final List<Integer> f) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.f = f;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private boolean b = false;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public boolean isB() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.b;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setB(final boolean b) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.b = b;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private TImpl _T = new TImpl(this);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object m(final List<String> l, final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._m(l, s);");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object n() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "C", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import java.util.List;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract List<Integer> getF();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract void setF(final List<Integer> f);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract boolean isB();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract void setB(final boolean b);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract Object m(final List<String> l, final String s);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract Object n();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "T", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import java.util.ArrayList;");
          _builder_2.newLine();
          _builder_2.append("import java.util.LinkedList;");
          _builder_2.newLine();
          _builder_2.append("import java.util.List;");
          _builder_2.newLine();
          _builder_2.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
          _builder_2.newLine();
          _builder_2.append("import traits.T;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class TImpl implements T {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public TImpl(final T delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public List<Integer> getF() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getF();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setF(final List<Integer> f) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setF(f);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public boolean isB() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.isB();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setB(final boolean b) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setB(b);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object m(final List<String> l, final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m(l, s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object _m(final List<String> l, final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("ArrayList<Integer> _newArrayList = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(1));");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this.setF(_newArrayList);");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("int _size = l.size();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _plus = (Integer.valueOf(_size) + s);");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("List<Integer> _f = this.getF();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _plus_1 = (_plus + _f);");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("boolean _isB = this.isB();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return (_plus_1 + Boolean.valueOf(_isB));");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("LinkedList<String> _newLinkedList = CollectionLiterals.<String>newLinkedList(\"bar\");");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("Object _m = this.m(_newLinkedList, \"foo\");");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _m;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "T", _builder_2);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "n", "1foo[1]false");
        }
      };
      this._compilationTestHelper.compile(_builder, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitPrivateMethod() {
    try {
      CharSequence _traitPrivateMethod = this._traitJInputs.traitPrivateMethod();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T1 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String callPriv();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T1", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T1;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T1Impl implements T1 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T1 _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T1Impl(final T1 delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String priv() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return \"T1.priv;\";");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String callPriv() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.callPriv();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _callPriv() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.priv();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T1", _builder_1);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callPriv", "T1.priv;");
        }
      };
      this._compilationTestHelper.compile(_traitPrivateMethod, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitSum() {
    try {
      CharSequence _traitSum = this._traitJInputs.traitSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.T1;");
          _builder.newLine();
          _builder.append("import tests.traits.T2;");
          _builder.newLine();
          _builder.append("import tests.traits.T3;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T extends T1, T2, T3 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object t1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object t2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object t3();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T1 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract Object t1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* required method");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract Object t2();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T1", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T1;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T1Impl implements T1 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T1 _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T1Impl(final T1 delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* required method");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object t2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.t2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.t1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object _t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return \"a\";");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T1", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T1Impl;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T2Impl;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3Impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class TImpl implements T {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T1Impl _T1;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T2Impl _T2;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3Impl _T3;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public TImpl(final T delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T1 = new T1Impl(delegate);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T2 = new T2Impl(delegate);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3 = new T3Impl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("Object _t1 = this.t1();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _string = _t1.toString();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("Object _t2 = this.t2();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _string_1 = _t2.toString();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _plus = (_string + _string_1);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("Object _t3 = this.t3();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _string_2 = _t3.toString();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_plus + _string_2);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object t1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.t1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object _t1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T1._t1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object t2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.t2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object _t2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T2._t2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object t3() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.t3();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public Object _t3() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3._t3();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T", _builder_3);
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("package tests;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("import tests.traits.T;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.impl.TImpl;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("@SuppressWarnings(\"all\")");
          _builder_4.newLine();
          _builder_4.append("public class C implements T {");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private TImpl _T = new TImpl(this);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String m() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T._m();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public Object t1() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T._t1();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public Object t2() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T._t2();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public Object t3() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T._t3();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder_4);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m", "a1 - a - false");
        }
      };
      this._compilationTestHelper.compile(_traitSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitUsesTraitWithTraitSum() {
    try {
      String _traitUsesTraitWithTraitSum = this._traitJInputs.traitUsesTraitWithTraitSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits.impl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.T4;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.TImpl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class T4Impl implements T4 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private T4 _delegate;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private TImpl _T;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public T4Impl(final T4 delegate) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this._delegate = delegate;");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("_T = new TImpl(delegate);");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String m() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String _m() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object t1() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.t1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object _t1() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._t1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object t2() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.t2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object _t2() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._t2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object t3() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.t3();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public Object _t3() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._t3();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T4", _builder);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C4", "m", "a1 - a - false");
        }
      };
      this._compilationTestHelper.compile(_traitUsesTraitWithTraitSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitUsesTraitWithFields() {
    try {
      CharSequence _traitUsesTraitWithFields = this._traitJInputs.traitUsesTraitWithFields();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits.impl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.T2;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.TImpl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class T2Impl implements T2 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private T2 _delegate;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private TImpl _T;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public T2Impl(final T2 delegate) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this._delegate = delegate;");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("_T = new TImpl(delegate);");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String m() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String _m() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T._m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String getS() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _delegate.getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setS(final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("_delegate.setS(s);");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T2", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T2;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.impl.T2Impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class C implements T2 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private String s = \"test\";");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String getS() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.s;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public void setS(final String s) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this.s = s;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T2Impl _T2 = new T2Impl(this);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T2._m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder_1);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m", "Test");
        }
      };
      this._compilationTestHelper.compile(_traitUsesTraitWithFields, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testClassWithTraitSum() {
    try {
      CharSequence _classWithTraitSum = this._traitJInputs.classWithTraitSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T1 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int getI();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setI(final int i);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object m1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract Object m2();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T1", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T1;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T1Impl implements T1 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T1 _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T1Impl(final T1 delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public int getI() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.getI();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public void setI(final int i) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_delegate.setI(i);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public Object m2() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public Object m1() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public Object _m1() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _i = this.getI();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("boolean _greaterThan = (_i > 3);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("if (_greaterThan) {");
          _builder_1.newLine();
          _builder_1.append("      ");
          _builder_1.append("return Integer.valueOf(this.getI());");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _i_1 = this.getI();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _plus = (_i_1 + 1);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this.setI(_plus);");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.m2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T1", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T1;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T1Impl;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class C implements T1, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private int i = 0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int getI() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.i;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setI(final int i) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this.i = i;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T1Impl _T1 = new T1Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T1._m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public Object m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2._m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder_2);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m1", "4");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m2", "4");
        }
      };
      this._compilationTestHelper.compile(_classWithTraitSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitWithDoubleApply() {
    try {
      CharSequence _traitWithDoubleApply = this._traitJInputs.traitWithDoubleApply();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface TDouble {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int doubleApply();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int m();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "TDouble", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.TDouble;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class TDoubleImpl implements TDouble {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private TDouble _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public TDoubleImpl(final TDouble delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public int m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public int doubleApply() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.doubleApply();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public int _doubleApply() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _m = this.m();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("int _m_1 = this.m();");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return (_m * _m_1);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "TDouble", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T1;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T1Impl implements T1 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T1 _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T1Impl(final T1 delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int _m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return 2;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T1", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T2;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T2Impl implements T2 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T2 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T2Impl(final T2 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return 3;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T2", _builder_3);
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("package tests;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("import tests.traits.T1;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.TDouble;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.impl.T1Impl;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.impl.TDoubleImpl;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("@SuppressWarnings(\"all\")");
          _builder_4.newLine();
          _builder_4.append("public class C1 implements T1, TDouble {");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private T1Impl _T1 = new T1Impl(this);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public int m() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T1._m();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private TDoubleImpl _TDouble = new TDoubleImpl(this);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public int doubleApply() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _TDouble._doubleApply();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C1", _builder_4);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C1", "doubleApply", "4");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C2", "doubleApply", "9");
        }
      };
      this._compilationTestHelper.compile(_traitWithDoubleApply, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameOperations() {
    try {
      CharSequence _traitRenameOperations = this._traitJInputs.traitRenameOperations();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int n2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int m2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int t1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int foo();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int m2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int t1();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int n2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int _m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.t1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int _t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._t1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.foo();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("int _n2 = this.n2();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("int _m2 = this.m2();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n2 + _m2);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int t1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.t1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _t1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._t1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int n2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "T3", _builder_3);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_traitRenameOperations, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameProvidedMethods() {
    try {
      CharSequence _traitRenameProvidedMethods = this._traitJInputs.traitRenameProvidedMethods();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String t1();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T2;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.impl.T2Impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T3_T2_0_Adapter _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T2Impl _T2_0;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_T2_0 = new T2Impl(this);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String n() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.n2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String n2() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.n2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _n2() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T2_0._n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.m2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String m2() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _m2() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T2_0._m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String t1() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.t1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _t1() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T2_0._t1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3Impl implements T3 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3 _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3Impl(final T3 delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String foo() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.foo();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _foo() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _n2 = this.n2();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _m2 = this.m2();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _plus = (_n2 + _m2);");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("String _t1 = this.t1();");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return (_plus + _t1);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T3_T2_0._n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T3_T2_0._m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.t1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _t1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T3_T2_0._t1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_2);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "foo", "T2.n;T1.m;T1.t1;");
        }
      };
      this._compilationTestHelper.compile(_traitRenameProvidedMethods, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameRequiredMethods() {
    try {
      CharSequence _traitRenameRequiredMethods = this._traitJInputs.traitRenameRequiredMethods();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String req();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String foo();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String req1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.req();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String req() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.req();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.foo();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String req() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.req();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_traitRenameRequiredMethods, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameRequiredMethodProvidedByTrait() {
    try {
      CharSequence _traitRenameRequiredMethodProvidedByTrait = this._traitJInputs.traitRenameRequiredMethodProvidedByTrait();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.T3_T2_0_Adapter;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String req();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String foo();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T3Impl implements T3 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T3 _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T3Impl(final T3 delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String req() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.req();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _req() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return \"T3.req\";");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String foo() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.foo();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _foo() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return this.n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String n() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _n() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T3_T2_0._n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T3_T2_0._m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_1);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_traitRenameRequiredMethodProvidedByTrait, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRedefinitionByRenaming() {
    try {
      CharSequence _traitRedefinitionByRenaming = this._traitJInputs.traitRedefinitionByRenaming();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m2();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String foo();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n2();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m2();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _m2 = this.m2();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (\"T3.\" + _m2);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.foo();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _foo() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n2 = this.n2();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _m = this.m();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n2 + _m);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "foo", "T2.n;T3.T1.m;");
        }
      };
      this._compilationTestHelper.compile(_traitRedefinitionByRenaming, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitDoubleRenaming() {
    try {
      CharSequence _traitDoubleRenaming = this._traitJInputs.traitDoubleRenaming();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m2();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3_T2_1_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n3();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m3();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_1", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_1_Adapter;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public interface T3 extends T3_T2_0_Adapter, T3_T2_1_Adapter {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String foo();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String n2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String m2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String n3();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public abstract String m3();");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T2;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T2Impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_Adapter _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T2Impl _T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T2_0 = new T2Impl(this);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.n2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T2_0._m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_3);
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("package tests.traits.impl;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("import tests.traits.T3;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_4.newLine();
          _builder_4.append("import tests.traits.impl.T3_T2_1_AdapterImpl;");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("@SuppressWarnings(\"all\")");
          _builder_4.newLine();
          _builder_4.append("public class T3Impl implements T3 {");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private T3 _delegate;");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("private T3_T2_1_AdapterImpl _T3_T2_1;");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public T3Impl(final T3 delegate) {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("this._delegate = delegate;");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("_T3_T2_1 = new T3_T2_1_AdapterImpl(delegate);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String m() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.m();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _m() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("String _m2 = this.m2();");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return (\"T3.\" + _m2);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String foo() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.foo();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _foo() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("String _n3 = this.n3();");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("String _m = this.m();");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return (_n3 + _m);");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String n2() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.n2();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _n2() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T3_T2_0._n2();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String m2() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.m2();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _m2() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T3_T2_0._m2();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String n3() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.n3();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _n3() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T3_T2_1._n3();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String m3() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _delegate.m3();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("public String _m3() {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("return _T3_T2_1._m3();");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_4);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "foo", "T2.n;T3.T1.m;");
        }
      };
      this._compilationTestHelper.compile(_traitDoubleRenaming, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameProvidedMethodToRequiredAndSum() {
    try {
      CharSequence _traitRenameProvidedMethodToRequiredAndSum = this._traitJInputs.traitRenameProvidedMethodToRequiredAndSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int m1();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T1;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter, T1 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int m1();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int _m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T1Impl;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T1Impl _T1;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T1 = new T1Impl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_traitRenameProvidedMethodToRequiredAndSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameProvidedMethodToRequiredAndSum2() {
    try {
      CharSequence _traitRenameProvidedMethodToRequiredAndSum2 = this._traitJInputs.traitRenameProvidedMethodToRequiredAndSum2();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract int m1();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T1;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T1, T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int m1();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_1;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_1 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public int _m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_1._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T1Impl;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T1Impl _T1;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T1 = new T1Impl(delegate);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_traitRenameProvidedMethodToRequiredAndSum2, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameRenamed() {
    try {
      CharSequence _traitRenameRenamed = this._traitJInputs.traitRenameRenamed();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String callFirstRename();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String secondRename();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callSecondRename();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callFirstRename();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String secondRename();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String callFirstRename() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.callFirstRename();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _callFirstRename() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._callFirstRename();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String firstRename() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.secondRename();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String secondRename() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.secondRename();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _secondRename() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._firstRename();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callSecondRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callSecondRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callSecondRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.secondRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callFirstRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callFirstRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callFirstRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._callFirstRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String secondRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.secondRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _secondRename() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._secondRename();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callSecondRename", "m");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callFirstRename", "m");
        }
      };
      this._compilationTestHelper.compile(_traitRenameRenamed, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenameRequiredMethodToProvidedAndSum() {
    try {
      CharSequence _classUsesTraitRenameRequiredMethodToProvidedAndSum = this._traitJInputs.classUsesTraitRenameRequiredMethodToProvidedAndSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM1", "T2.m;");
        }
      };
      this._compilationTestHelper.compile(_classUsesTraitRenameRequiredMethodToProvidedAndSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRenamedRequiredMethodDoesNotConflict() {
    try {
      CharSequence _traitRenamedRequiredMethodDoesNotConflict = this._traitJInputs.traitRenamedRequiredMethodDoesNotConflict();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM1", "T2.m;");
        }
      };
      this._compilationTestHelper.compile(_traitRenamedRequiredMethodDoesNotConflict, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testClassRenamesRequiredMethodToProvidedAndSum() {
    try {
      CharSequence _classRenamesRequiredMethodToProvidedAndSum = this._traitJInputs.classRenamesRequiredMethodToProvidedAndSum();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.C_T1_0_Adapter;");
          _builder.newLine();
          _builder.append("import tests.traits.T2;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.C_T1_0_AdapterImpl;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.T2Impl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C implements T2, C_T1_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private T2Impl _T2 = new T2Impl(this);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String m() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T2._m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private C_T1_0_AdapterImpl _C_T1_0 = new C_T1_0_AdapterImpl(this);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String callM1() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _C_T1_0._callM1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface C_T1_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callM1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "C_T1_0", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.C_T1_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T1;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T1Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class C_T1_0_AdapterImpl implements C_T1_0_Adapter, T1 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private C_T1_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T1Impl _T1_1;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public C_T1_0_AdapterImpl(final C_T1_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T1_1 = new T1Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String callM1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.callM1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _callM1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T1_1._callM1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "C_T1_0", _builder_2);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM1", "T2.m;");
        }
      };
      this._compilationTestHelper.compile(_classRenamesRequiredMethodToProvidedAndSum, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRenameField() {
    try {
      CharSequence _classUsesTraitWithRenamedFields = this._traitJInputs.classUsesTraitWithRenamedFields();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract boolean isB();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setB(final boolean fieldB);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract boolean n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String fieldS);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String meth();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract boolean n();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public boolean isFieldB() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.isB();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public boolean isB() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.isB();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setFieldB(final boolean fieldB) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this.setB(fieldB);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setB(final boolean fieldB) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setB(fieldB);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public boolean n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public boolean _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getFieldS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setFieldS(final String fieldS) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this.setS(fieldS);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String fieldS) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(fieldS);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String meth() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.meth();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _meth() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _s = this.getS();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("boolean _isB = this.isB();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_s + Boolean.valueOf(_isB));");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public boolean n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public boolean _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public boolean isB() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.isB();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setB(final boolean fieldB) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setB(fieldB);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String fieldS) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(fieldS);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "meth", "testtrue");
        }
      };
      this._compilationTestHelper.compile(_classUsesTraitWithRenamedFields, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitHide() {
    try {
      CharSequence _traitHide = this._traitJInputs.traitHide();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String p();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* independent new version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int m(final int i);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callN();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract int callM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String p();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* independent new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int m(final int i) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m(i);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* independent new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _m(final int i) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return i;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callN();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n = this.n();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _p = this.p();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n + _p);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callM();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public int _callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.m(10);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM", "10");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callN", "T1.m;T1.m;");
        }
      };
      this._compilationTestHelper.compile(_traitHide, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitAlias() {
    try {
      CharSequence _traitAlias = this._traitJInputs.traitAlias();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String p();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String oldm();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callN();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String p();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String oldm();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.oldm();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callN();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n = this.n();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _p = this.p();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n + _p);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callM();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _m = this.m();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _oldm = this.oldm();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_m + _oldm);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "oldm", "T1.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM", "T1.m;T1.m;");
        }
      };
      this._compilationTestHelper.compile(_traitAlias, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitAliasWithRenameAndHide() {
    try {
      CharSequence _traitAliasWithRenameAndHide = this._traitJInputs.traitAliasWithRenameAndHide();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String p();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m1();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String oldm();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of n");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String oldn();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* independent version of n");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n(final int i);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callN();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String p();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m1();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String oldm();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of n");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String oldn();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return this.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m1();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.oldm();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of n");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of n");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String oldn() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.oldn();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of n");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _oldn() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* independent version of n");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n(final int i) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n(i);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* independent version of n");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n(final int i) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _oldn = this.oldn();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _plus = (_oldn + Integer.valueOf(i));");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_plus + \" - \");");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callN();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n = this.n(10);");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _p = this.p();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n + _p);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callM();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _m1 = this.m1();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _oldm = this.oldm();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_m1 + _oldm);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m1() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._m1();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of n");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String oldn() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.oldn();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of n");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _oldn() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._oldn();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "oldm", "T1.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m1", "T1.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM", "T1.m;T1.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callN", "T1.n;10 - T1.m;T1.n;");
        }
      };
      this._compilationTestHelper.compile(_traitAliasWithRenameAndHide, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRestrict() {
    try {
      CharSequence _traitRestrict = this._traitJInputs.traitRestrict();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String p();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* new version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callN();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String p();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return \"T3.m;\";");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callN();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n = this.n();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _p = this.p();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n + _p);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callM();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM", "T3.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callN", "T3.m;T3.m;");
        }
      };
      this._compilationTestHelper.compile(_traitRestrict, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRestrictAndAlias() {
    try {
      CharSequence _traitRestrictAndAlias = this._traitJInputs.traitRestrictAndAlias();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String p();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String oldm();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("/**");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("* original version of m");
          _builder.newLine();
          _builder.append("   ");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String n();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS(final String s);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* new version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callN();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String p();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("/**");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("* original version of m");
          _builder_1.newLine();
          _builder_1.append("   ");
          _builder_1.append("*/");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String oldm();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String n();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _p() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._p();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.oldm();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("/**");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("* original version of m");
          _builder_2.newLine();
          _builder_2.append("   ");
          _builder_2.append("*/");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _oldm() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _n() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._n();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS(final String s) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS(s);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* new version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _m() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _oldm = this.oldm();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (\"T3.m;\" + _oldm);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callN();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callN() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _n = this.n();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("String _p = this.p();");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return (_n + _p);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callM();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callM() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return this.m();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _p() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._p();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("/**");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("* original version of m");
          _builder_3.newLine();
          _builder_3.append("   ");
          _builder_3.append("*/");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _oldm() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._oldm();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _n() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._n();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS(final String s) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS(s);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callM", "T3.m;T1.m;");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callN", "T3.m;T1.m;T3.m;T1.m;");
        }
      };
      this._compilationTestHelper.compile(_traitRestrictAndAlias, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRedirect() {
    try {
      CharSequence _traitRedirect = this._traitJInputs.traitRedirect();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T3_T2_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String useField();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String prov();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String callReq();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String getS2();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract void setS2(final String s2);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T3_T2_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public interface T3 extends T3_T2_0_Adapter {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String useField();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String prov();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public abstract String callReq();");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T3", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T3_T2_0_Adapter;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2Impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T3_T2_0_AdapterImpl implements T3_T2_0_Adapter, T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T3_T2_0_Adapter _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2Impl _T2_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T3_T2_0_AdapterImpl(final T3_T2_0_Adapter delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_0 = new T2Impl(this);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String useField() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.useField();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _useField() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._useField();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String prov() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.prov();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _prov() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._prov();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String callReq() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.callReq();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _callReq() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_0._callReq();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS1() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS1(final String s1) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS2(s1);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String getS2() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.getS2();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public void setS2(final String s2) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_delegate.setS2(s2);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String req() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.prov();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T3_T2_0", _builder_2);
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("package tests.traits.impl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("import tests.traits.T3;");
          _builder_3.newLine();
          _builder_3.append("import tests.traits.impl.T3_T2_0_AdapterImpl;");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("@SuppressWarnings(\"all\")");
          _builder_3.newLine();
          _builder_3.append("public class T3Impl implements T3 {");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3 _delegate;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("private T3_T2_0_AdapterImpl _T3_T2_0;");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public T3Impl(final T3 delegate) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("this._delegate = delegate;");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_T3_T2_0 = new T3_T2_0_AdapterImpl(delegate);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String useField() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.useField();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _useField() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._useField();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String prov() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.prov();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _prov() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._prov();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String callReq() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.callReq();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String _callReq() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _T3_T2_0._callReq();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public String getS2() {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("return _delegate.getS2();");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("public void setS2(final String s2) {");
          _builder_3.newLine();
          _builder_3.append("    ");
          _builder_3.append("_delegate.setS2(s2);");
          _builder_3.newLine();
          _builder_3.append("  ");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T3", _builder_3);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "useField", "s2");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "callReq", "prov");
        }
      };
      this._compilationTestHelper.compile(_traitRedirect, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitRequiredMethodProvidedWithCovariantReturnType() {
    try {
      CharSequence _traitRequiredMethodProvidedWithCovariantReturnType = this._traitJInputs.traitRequiredMethodProvidedWithCovariantReturnType();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import java.util.ArrayList;");
          _builder.newLine();
          _builder.append("import tests.traits.T1;");
          _builder.newLine();
          _builder.append("import tests.traits.T2;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.T1Impl;");
          _builder.newLine();
          _builder.append("import tests.traits.impl.T2Impl;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C implements T2, T1 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private T2Impl _T2 = new T2Impl(this);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public ArrayList<String> createList() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T2._createList();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private T1Impl _T1 = new T1Impl(this);");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String listToString() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return _T1._listToString();");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "listToString", "[1, 2, 3]");
        }
      };
      this._compilationTestHelper.compile(_traitRequiredMethodProvidedWithCovariantReturnType, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitAliasWhenSplitInTwoFiles() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package tests;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("trait T1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("String m() { return null; }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      TJProgram _parse = this._parseHelper.parse(_builder);
      Resource _eResource = _parse.eResource();
      final ResourceSet rs = _eResource.getResourceSet();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package tests;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("trait T2 uses tests.T1[alias m as newM] {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._parseHelper.parse(_builder_1, rs);
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T2_T1_0_Adapter {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String newM();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String m();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaInterface(it, "tests", "T2_T1_0", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T1;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T2_T1_0_Adapter;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.impl.T1Impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T2_T1_0_AdapterImpl implements T2_T1_0_Adapter, T1 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T2_T1_0_Adapter _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T1Impl _T1_0;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T2_T1_0_AdapterImpl(final T2_T1_0_Adapter delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_T1_0 = new T1Impl(this);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _m() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T1_0._m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String newM() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.newM();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _newM() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T1_0._m();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitAdapterJavaClass(it, "tests", "T2_T1_0", _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("package tests.traits.impl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("import tests.traits.T2;");
          _builder_2.newLine();
          _builder_2.append("import tests.traits.impl.T2_T1_0_AdapterImpl;");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("@SuppressWarnings(\"all\")");
          _builder_2.newLine();
          _builder_2.append("public class T2Impl implements T2 {");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2 _delegate;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("private T2_T1_0_AdapterImpl _T2_T1_0;");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public T2Impl(final T2 delegate) {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("this._delegate = delegate;");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("_T2_T1_0 = new T2_T1_0_AdapterImpl(delegate);");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String newM() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.newM();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _newM() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_T1_0._newM();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _delegate.m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("public String _m() {");
          _builder_2.newLine();
          _builder_2.append("    ");
          _builder_2.append("return _T2_T1_0._m();");
          _builder_2.newLine();
          _builder_2.append("  ");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T2", _builder_2);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(rs, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTraitProvidesMethodToUsedTrait() {
    try {
      CharSequence _traitProvidesMethodToUsedTrait = this._traitJInputs.traitProvidesMethodToUsedTrait();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests.traits;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("import tests.traits.T1;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public interface T2 extends T1 {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String req();");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public abstract String useReq();");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertTraitJavaInterface(it, "tests", "T2", _builder);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("package tests.traits.impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("import tests.traits.T2;");
          _builder_1.newLine();
          _builder_1.append("import tests.traits.impl.T1Impl;");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("@SuppressWarnings(\"all\")");
          _builder_1.newLine();
          _builder_1.append("public class T2Impl implements T2 {");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T2 _delegate;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("private T1Impl _T1;");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public T2Impl(final T2 delegate) {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("this._delegate = delegate;");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("_T1 = new T1Impl(delegate);");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String req() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.req();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _req() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return \"req\";");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String useReq() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _delegate.useReq();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("public String _useReq() {");
          _builder_1.newLine();
          _builder_1.append("    ");
          _builder_1.append("return _T1._useReq();");
          _builder_1.newLine();
          _builder_1.append("  ");
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          TraitJCompilerTest.this.assertTraitJavaClass(it, "tests", "T2", _builder_1);
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "useReq", "req");
        }
      };
      this._compilationTestHelper.compile(_traitProvidesMethodToUsedTrait, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testClassWithDefaultEmptyConstructor() {
    try {
      CharSequence _classWithDefaultEmptyConstructor = this._traitJInputs.classWithDefaultEmptyConstructor();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private String s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String getS() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setS(final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public C() {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_classWithDefaultEmptyConstructor, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testClassWithDefaultConstructor() {
    try {
      CharSequence _classWithDefaultConstructor = this._traitJInputs.classWithDefaultConstructor();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private String s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String getS() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setS(final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public C() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = \"\";");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_classWithDefaultConstructor, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testClassConstructors() {
    try {
      CharSequence _classWithConstructors = this._traitJInputs.classWithConstructors();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("package tests;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("@SuppressWarnings(\"all\")");
          _builder.newLine();
          _builder.append("public class C {");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private String s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public String getS() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setS(final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("private int i;");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public int getI() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("return this.i;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public void setI(final int i) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.i = i;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public C() {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = \"\";");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.i = 0;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public C(final String mys) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = mys;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("  ");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("public C(final int i, final String s) {");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.i = i;");
          _builder.newLine();
          _builder.append("    ");
          _builder.append("this.s = s;");
          _builder.newLine();
          _builder.append("  ");
          _builder.append("}");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          TraitJCompilerTest.this.assertJavaClass(it, "tests", "C", _builder);
          TraitJCompilerTest.this.assertGeneratedJavaCodeCompiles(it);
        }
      };
      this._compilationTestHelper.compile(_classWithConstructors, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCompliantRequiredFields() {
    try {
      CharSequence _compliantRequiredFields = this._traitJInputs.compliantRequiredFields();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m1", "s");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m2", "s");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m3", "s");
        }
      };
      this._compilationTestHelper.compile(_compliantRequiredFields, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCompliantRequiredMethods() {
    try {
      CharSequence _compliantRequiredMethods = this._traitJInputs.compliantRequiredMethods();
      final IAcceptor<Result> _function = new IAcceptor<Result>() {
        public void accept(final Result it) {
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m1", "req");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "m2", "req");
          TraitJCompilerTest.this.executeGeneratedJavaClassMethodAndAssert(it, "C", "req", "req");
        }
      };
      this._compilationTestHelper.compile(_compliantRequiredMethods, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertTraitAdapterJavaInterface(final Result r, final String name, final CharSequence expected) {
    String _plus = (name + "_Adapter");
    this.assertTraitJavaInterface(r, _plus, expected);
  }
  
  private void assertTraitJavaInterface(final Result r, final String name, final CharSequence expected) {
    String _plus = ("traits." + name);
    this.assertJavaCode(r, _plus, expected);
  }
  
  private void assertTraitAdapterJavaClass(final Result r, final String name, final CharSequence expected) {
    String _plus = (name + "_Adapter");
    this.assertTraitJavaClass(r, _plus, expected);
  }
  
  private void assertTraitJavaClass(final Result r, final String name, final CharSequence expected) {
    String _plus = ("traits.impl." + name);
    String _plus_1 = (_plus + "Impl");
    this.assertJavaCode(r, _plus_1, expected);
  }
  
  private void assertTraitAdapterJavaInterface(final Result r, final String packageName, final String name, final CharSequence expected) {
    String _plus = (name + "_Adapter");
    this.assertTraitJavaInterface(r, packageName, _plus, expected);
  }
  
  private void assertTraitJavaInterface(final Result r, final String packageName, final String name, final CharSequence expected) {
    String _plus = (packageName + ".traits.");
    String _plus_1 = (_plus + name);
    this.assertJavaCode(r, _plus_1, expected);
  }
  
  private void assertTraitAdapterJavaClass(final Result r, final String packageName, final String name, final CharSequence expected) {
    String _plus = (name + "_Adapter");
    this.assertTraitJavaClass(r, packageName, _plus, expected);
  }
  
  private void assertTraitJavaClass(final Result r, final String packageName, final String name, final CharSequence expected) {
    String _plus = (packageName + ".traits.impl.");
    String _plus_1 = (_plus + name);
    String _plus_2 = (_plus_1 + "Impl");
    this.assertJavaCode(r, _plus_2, expected);
  }
  
  private void assertJavaClass(final Result r, final String packageName, final String name, final CharSequence expected) {
    String _plus = (packageName + ".");
    String _plus_1 = (_plus + name);
    this.assertJavaCode(r, _plus_1, expected);
  }
  
  private void assertJavaClass(final Result r, final String name, final CharSequence expected) {
    this.assertJavaCode(r, name, expected);
  }
  
  private void assertJavaCode(final Result r, final String name, final CharSequence expected) {
    final Procedure1<Result> _function = new Procedure1<Result>() {
      public void apply(final Result it) {
        String _string = expected.toString();
        String _generatedCode = it.getGeneratedCode(name);
        Assert.assertEquals(_string, _generatedCode);
      }
    };
    ObjectExtensions.<Result>operator_doubleArrow(r, _function);
  }
  
  private Result executeGeneratedJavaClassMethodAndAssert(final Result r, final String className, final String methodName, final CharSequence expected) {
    final Procedure1<Result> _function = new Procedure1<Result>() {
      public void apply(final Result it) {
        try {
          String _plus = ("tests." + className);
          Class<? extends Object> c = it.getCompiledClass(_plus);
          boolean _equals = Objects.equal(c, null);
          if (_equals) {
            Class<? extends Object> _compiledClass = it.getCompiledClass(className);
            c = _compiledClass;
          }
          final Object obj = c.newInstance();
          String _string = expected.toString();
          Object _invoke = TraitJCompilerTest.this._reflectExtensions.invoke(obj, methodName);
          String _string_1 = _invoke.toString();
          Assert.assertEquals(_string, _string_1);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      }
    };
    Result _doubleArrow = ObjectExtensions.<Result>operator_doubleArrow(r, _function);
    return _doubleArrow;
  }
  
  private Class<? extends Object> assertGeneratedJavaCodeCompiles(final Result r) {
    Class<? extends Object> _compiledClass = r.getCompiledClass();
    return _compiledClass;
  }
}
