package xtraitj.input.tests;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class TraitJInputs {
  public CharSequence traitSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T uses T1, T2, T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return t1().toString + t2().toString() + t3().toString()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* required method */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t1() { return \"a\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t1(); // required");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t2() { return 1 + \" - \" + t1().toString() + \" - \"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t3() { return false; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T { }");
    _builder.newLine();
    return _builder;
  }
  
  public String traitUsesTraitWithTraitSum() {
    CharSequence _traitSum = this.traitSum();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("trait T4 uses T {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C4 uses T4 {}");
    _builder.newLine();
    String _plus = (_traitSum + _builder.toString());
    return _plus;
  }
  
  public CharSequence traitUsesTraitWithFields() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = s.toFirstUpper");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"test\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitDependency() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T uses T1, T2  {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String f;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return t1().toString + t2().toString() + t3().toString()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object f1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t1() { return \"a\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T2 uses T4, T5 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object f2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t2() { return 1; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object req2();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object f3;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t3() { return false; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T4 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object f4;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t4() { return false; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T5 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object f5;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object t5() { return false; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//class C uses T { }");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitWithDependencies() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitDependency = this.traitDependency();
    _builder.append(_traitDependency, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class C uses T {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classWithTraitSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object m2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object m1() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (i > 3)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i = i+1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object m1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object m2() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (i > 3)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i = i+1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T1, T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitWithDoubleApply() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m() { return 2; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m() { return 3; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait TDouble {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int doubleApply() { return m() * m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C1 uses T1, TDouble {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C2 uses T2, TDouble {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameOperations() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m() { return 0; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int t1() { return 0; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int n();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename m to m2, rename n to n2 ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n2() + m2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameProvidedMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String t1() { return \"T1.t1;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return \"T2.n;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename m to m2, rename n to n2 ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n2() + m2() + t1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameRequiredMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return req1(); }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req1(); // required");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename req1 to req ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameProvidedMethodToRequiredAndSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m() { 0 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// the provided method is renamed so that");
    _builder.newLine();
    _builder.append("// it matches the required one");
    _builder.newLine();
    _builder.append("trait T3 uses T2[rename m to m1], T1 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitRenameProvidedMethodToRequiredAndSum() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitRenameProvidedMethodToRequiredAndSum = this.traitRenameProvidedMethodToRequiredAndSum();
    _builder.append(_traitRenameProvidedMethodToRequiredAndSum, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class C uses T3 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameProvidedMethodToRequiredAndSum2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m() { 0 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// the provided method is renamed so that");
    _builder.newLine();
    _builder.append("// it matches the required one");
    _builder.newLine();
    _builder.append("trait T3 uses T1, T2[rename m to m1] {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitRenameProvidedMethodToRequiredAndSum2() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitRenameProvidedMethodToRequiredAndSum2 = this.traitRenameProvidedMethodToRequiredAndSum2();
    _builder.append(_traitRenameProvidedMethodToRequiredAndSum2, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class C uses T3 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameRequiredMethodToProvidedAndSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM1() { m1() }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { \"T2.m;\" }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// the required method is renamed so that");
    _builder.newLine();
    _builder.append("// it matches the provided one");
    _builder.newLine();
    _builder.append("trait T3 uses T2, T1[rename m1 to m] ");
    _builder.newLine();
    _builder.append("{}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitRenameRequiredMethodToProvidedAndSum() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitRenameRequiredMethodToProvidedAndSum = this.traitRenameRequiredMethodToProvidedAndSum();
    _builder.append(_traitRenameRequiredMethodToProvidedAndSum, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class C uses T3 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenamedRequiredMethodDoesNotConflict() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM1() { m1() }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { \"T2.m;\" }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1(int i) { return i; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// the required method is renamed so that");
    _builder.newLine();
    _builder.append("// it matches the provided one");
    _builder.newLine();
    _builder.append("// T2.m1 will not conflict at all");
    _builder.newLine();
    _builder.append("trait T3 uses T2, T1[rename m1 to m] ");
    _builder.newLine();
    _builder.append("{}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameRenamed() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"m\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1[rename m to firstRename] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callFirstRename() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.firstRename();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[rename firstRename to secondRename] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callSecondRename() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.secondRename();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classRenamesRequiredMethodToProvidedAndSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM1() { m1() }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { \"T2.m;\" }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// the required method is renamed so that");
    _builder.newLine();
    _builder.append("// it matches the provided one");
    _builder.newLine();
    _builder.append("class C uses T2, T1[rename m1 to m] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRequiredMethodProvidedBySum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1() { 0 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2, T1 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRequiredMethodProvidedBySum2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m1() { 0 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T1, T2 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitWithRenamedRequiredMethods() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitRenameRequiredMethods = this.traitRenameRequiredMethods();
    _builder.append(_traitRenameRequiredMethods, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("trait T4 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req() { \"req\" }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3, T4 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameRequiredMethodProvidedByTrait() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return req1(); }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req1(); // required");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename req1 to req ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"T3.req\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRedefinitionByRenaming() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return \"T2.n;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename m to m2, rename n to n2 ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"T3.\" + m2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n2() + m();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitDoubleRenaming() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return \"T2.n;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename m to m2, rename n to n2 ], ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("T2[ rename m to m3, rename n to n3 ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"T3.\" + m2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String foo() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n3() + m();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRenameField() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String fieldS;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return fieldS; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean fieldB;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean n() { return fieldB; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ rename fieldS to s, rename fieldB to b ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String meth() { return s + b; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classUsesTraitWithRenamedFields() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traitRenameField = this.traitRenameField();
    _builder.append(_traitRenameField, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean b = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"test\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitHide() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String p() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ hide m ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* independent new version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m(int i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callN() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n() + p();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int callM() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m(10);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitAlias() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String p() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ alias m as oldm ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callN() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n() + p();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m() + oldm();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitAliasWithRenameAndHide() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of n */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return \"T1.n;\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String p() { return m() + n(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ alias m as oldm, alias n as oldn,");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("rename m to m1, hide n ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* independent version of n */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n(int i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return oldn() + i + \" - \";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callN() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n(10) + p();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m1() + oldm();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRestrict() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String p() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ restrict m ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* new version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"T3.m;\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callN() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n() + p();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRestrictAndAlias() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* original version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() { return \"T1.m;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String n() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String p() { return m(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ alias m as oldm, restrict m ] {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* new version of m */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"T3.m;\" + oldm();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callN() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return n() + p();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callM() { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitPrivateMethod() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String priv() { return \"T1.priv;\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callPriv() { return priv(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRedirect() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String prov() { return \"prov\"; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String callReq() { return req(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String useField() { return s1; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T2[ redirect s1 to s2, redirect req to prov ] {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s2 = \"s2\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitRequiredMethodProvidedWithCovariantReturnType() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<? extends String> createList();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String listToString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createList().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<String> createList() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newArrayList(\"1\", \"2\", \"3\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T2, T1 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classImplementsSerializableAndClonable() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.Serializable");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C implements Serializable, Cloneable {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence traitProvidesMethodToUsedTrait() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String useReq() { return req(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 uses T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req() { return \"req\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T2 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compliantRequiredFields() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m1() { return s; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m2() { return s; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T1, T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m3() { return s; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = \"s\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compliantRequiredMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m1() { return req(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String m2() { return req(); }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T3 uses T1, T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String req() { return \"req\"; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C uses T3 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classImplementsAllInterfaceMethodsWithSum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import xtraitj.input.tests.MyTestInterface");
    _builder.newLine();
    _builder.append("import xtraitj.input.tests.MyTestInterface2");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int m(List<String> l) { return l.size }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("trait T2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Integer> n(int i) { return null; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C implements MyTestInterface, MyTestInterface2 uses T1, T2 {}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classWithDefaultEmptyConstructor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C() {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classWithDefaultConstructor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence classWithConstructors() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C(String mys) { s = mys; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C(int i, String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.i = i;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.s = s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
