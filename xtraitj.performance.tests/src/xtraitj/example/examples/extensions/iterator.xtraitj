package xtraitj.example.examples.extensions;

import java.util.Iterator

/**
 * Acts as a wrapper for a Java Iterator
 */
trait TIterator<E> {
	Iterator<E> iterator;
	
	boolean hasNext() { return iterator.hasNext(); }
	E next() { return iterator.next(); }
	void remove() { iterator.remove(); }
}

trait TTransformerIterator<T,R> uses TIterator<T>[rename next to origNext] {
	(T) => R function;
	
	R next() {
		val T o = origNext();
		return function.apply(o);
	}
}

class TransformerIterator<T,R> 
		implements Iterator<R>
		uses TTransformerIterator<T,R> {

	Iterator<T> iterator;
	(T) => R function ;
	
	TransformerIterator(Iterator<T> iterator, (T) => R function) {
		this.iterator = iterator;
		this.function = function;
	}
}